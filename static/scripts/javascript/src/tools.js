// Generated by CoffeeScript 1.4.0

define(['jquery', 'kinetic'], function($, K) {
  return {
    createImage: function(_arg) {
      var callback, h, height, imageObj, left, marginLeft, marginTop, name, src, stage, top, w, width,
        _this = this;
      stage = _arg.stage, name = _arg.name, src = _arg.src, top = _arg.top, left = _arg.left, width = _arg.width, height = _arg.height, marginLeft = _arg.marginLeft, marginTop = _arg.marginTop, callback = _arg.callback;
      h = stage.getHeight();
      w = stage.getWidth();
      if (top == null) {
        top = 0.0;
      }
      if (left == null) {
        left = 0.0;
      }
      if (width == null) {
        width = 1.0;
      }
      if (height == null) {
        height = 1.0;
      }
      if (marginLeft == null) {
        marginLeft = 0.0;
      }
      if (marginTop == null) {
        marginTop = 0.0;
      }
      imageObj = new Image();
      imageObj.onload = function() {
        var img, scalingFactor, scalingFactorH, scalingFactorW;
        scalingFactorW = Math.min(1.0, w * width / imageObj.width);
        scalingFactorH = Math.min(1.0, w * height / imageObj.height);
        scalingFactor = Math.min(scalingFactorW, scalingFactorH);
        img = new K.Image({
          x: w * left + imageObj.width * scalingFactor * marginLeft,
          y: h * top + imageObj.height * scalingFactor * marginTop,
          width: scalingFactor * imageObj.width,
          height: scalingFactor * imageObj.height,
          image: imageObj,
          name: name
        });
        return callback(img);
      };
      return imageObj.src = src;
    },
    createRect: function(_arg) {
      var draggable, fill, h, height, left, marginLeft, marginTop, name, rect, scalingFactor, stage, stroke, strokeWidth, top, w, width;
      stage = _arg.stage, name = _arg.name, top = _arg.top, left = _arg.left, width = _arg.width, height = _arg.height, marginLeft = _arg.marginLeft, marginTop = _arg.marginTop, fill = _arg.fill, stroke = _arg.stroke, strokeWidth = _arg.strokeWidth, draggable = _arg.draggable;
      if (top == null) {
        top = 0.0;
      }
      if (left == null) {
        left = 0.0;
      }
      if (width == null) {
        width = 1.0;
      }
      if (height == null) {
        height = 1.0;
      }
      if (marginLeft == null) {
        marginLeft = 0.0;
      }
      if (marginTop == null) {
        marginTop = 0.0;
      }
      if (draggable == null) {
        draggable = false;
      }
      h = stage.getHeight();
      w = stage.getWidth();
      scalingFactor = 1.0;
      width = width <= 1.0 ? w * width : width;
      if (height === 'square') {
        height = width;
      } else {
        height = height <= 1.0 ? h * height : height;
      }
      console.log("draw rect", h, top, height, marginTop, h * top, h * top + height * marginTop);
      rect = new K.Rect({
        x: w * left + width * marginLeft,
        y: h * top + height * marginTop,
        width: width,
        height: height,
        name: name,
        stroke: stroke,
        strokeWidth: strokeWidth,
        fill: fill,
        draggable: draggable
      });
      console.log(rect.attrs.x);
      return rect;
    },
    addShadow: function(el) {
      el.setShadowBlur(50);
      el.setShadowColor('black');
      el.setShadowOffset([0, 0]);
      el.setShadowOpacity(1.0);
      return el.enableShadow();
    }
  };
});
