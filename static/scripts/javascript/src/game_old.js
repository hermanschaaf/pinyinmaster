// Generated by CoffeeScript 1.4.0

define(['jquery', 'kinetic', 'menus'], function($, K) {
  var Game, down, fixPosition, mousePos1, mousePos2, mousePosMax, score, words;
  console.log('kinetic', K);
  fixPosition = function(e, gCanvasElement) {
    var x, y;
    x = void 0;
    y = void 0;
    if (e.pageX || e.pageY) {
      x = e.pageX;
      y = e.pageY;
    } else {
      x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
      y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
    }
    x -= gCanvasElement.offsetLeft;
    y -= gCanvasElement.offsetTop;
    return {
      x: x,
      y: y
    };
  };
  words = [
    {
      char: '你',
      piny: 'nǐ',
      ascii: 'ni',
      ans: '3',
      def: 'you'
    }, {
      char: '是',
      piny: 'shì',
      ascii: 'shi',
      ans: '4',
      def: 'is, to be'
    }, {
      char: '他',
      piny: 'tā',
      ascii: 'ta',
      ans: '1',
      def: 'him, he'
    }, {
      char: '狗肉',
      piny: 'gǒu ròu',
      ascii: 'gou rou',
      ans: '34',
      def: 'dog meat, something very stinky or repulsive'
    }, {
      char: '否',
      piny: 'fǒu',
      ascii: 'fou',
      ans: '3',
      def: 'otherwise, or else'
    }
  ];
  mousePos1 = {};
  mousePosMax = {};
  mousePos2 = {};
  down = false;
  score = 0;
  Game = (function() {

    function Game(canvas) {
      var _this = this;
      this.canvas = canvas;
      this.context = this.canvas.getContext('2d');
      this.restorePoint = false;
      this.width = this.canvas.width;
      this.height = this.canvas.height;
      this.jiayous = [];
      this.setDefaults();
      this.nextCard();
      setInterval(function() {
        return _this.redraw(_this);
      }, 100);
      this.$score = $('.score');
      this.playing = false;
      this.score = 1;
      this.combo = 1;
      this.startListeners();
      this.startGame();
    }

    Game.prototype.setDefaults = function() {
      this.defaults = {
        fontFamily: 'Georgia, "Times New Roman", "Microsoft YaHei", "微软雅黑", STXihei, "华文细黑", serif',
        fontSize: '40px',
        fontStyle: 'normal',
        fillStyle: '#000000'
      };
      this.setCanvasFont(this.defaults);
      return this.canvas.fillStyle = this.defaults.fillStyle;
    };

    Game.prototype.setCanvasFont = function(_arg) {
      var fontFamily, fontSize, fontStyle, obj;
      fontStyle = _arg.fontStyle, fontSize = _arg.fontSize, fontFamily = _arg.fontFamily;
      obj = this.defaults;
      if (fontStyle) {
        obj.fontStyle = fontStyle;
      }
      if (fontSize) {
        obj.fontSize = fontSize;
      }
      if (fontFamily) {
        obj.fontFamily = fontFamily;
      }
      return this.context.font = obj.fontStyle + ' ' + obj.fontSize + ' ' + obj.fontFamily;
    };

    Game.prototype.nextCard = function() {
      this.context.clearRect(0, 0, this.width, this.height);
      this.chooseWord();
      this.drawCard();
      return this.saveRestorePoint();
    };

    Game.prototype.drawCard = function() {
      this.setDefaults();
      this.drawCharacter(this.word.char.charAt(0));
      this.drawAscii(this.word.ascii);
      this.drawDefinition(this.word.def);
      return this.drawWord(this.word.char);
    };

    Game.prototype.drawCharacter = function(text) {
      var c;
      c = this.context;
      this.setCanvasFont({
        fontSize: '200px'
      });
      c.fillStyle = '#000000';
      c.textBaseline = 'top';
      c.textAlign = 'center';
      return c.fillText(text, this.width / 2, 50);
    };

    Game.prototype.drawAscii = function(text) {
      var c;
      c = this.context;
      this.setCanvasFont({
        fontSize: '40px'
      });
      c.fillStyle = '#666666';
      c.textBaseline = 'bottom';
      c.textAlign = 'center';
      return c.fillText(text, this.width / 2, this.height - 10);
    };

    Game.prototype.drawDefinition = function(text) {
      var c;
      c = this.context;
      this.setCanvasFont({
        fontSize: '20px'
      });
      c.fillStyle = '#888888';
      c.textBaseline = 'top';
      c.textAlign = 'left';
      text = text.slice(0, 21);
      return c.fillText(text, 20, 20, this.width / 2 - 20);
    };

    Game.prototype.drawWord = function(text) {
      var c, dimensions;
      c = this.context;
      this.setCanvasFont({
        fontSize: '20px'
      });
      c.fillStyle = '#888888';
      c.textBaseline = 'top';
      c.textAlign = 'right';
      dimensions = c.measureText(text);
      return c.fillText(text, this.width - dimensions.width, 20, this.width / 2);
    };

    Game.prototype.saveRestorePoint = function() {
      this.restorePoint = this.canvas.toDataURL();
      return console.log("saved!!");
    };

    Game.prototype.loadRestorePoint = function() {
      var img;
      if (this.restorePoint) {
        img = new Image();
        img.src = this.restorePoint;
        this.context.clearRect(0, 0, this.width, this.height);
        this.context.drawImage(img, 0, 0);
        return console.log("restored!");
      }
    };

    Game.prototype.startListeners = function() {
      var _this = this;
      $(document).mousemove(function(e) {
        var page, pos;
        if (down) {
          page = fixPosition(e, _this.canvas);
          if (Math.abs(mousePosMax.difY) < Math.abs(page.y - mousePos1.y)) {
            mousePosMax.difY = page.y - mousePos1.y;
            mousePosMax.y = page.y;
          }
          _this.context.strokeStyle = '#ffff00';
          _this.context.lineWidth = 10;
          pos = fixPosition(e, _this.canvas);
          _this.context.lineTo(pos.x, pos.y);
          return _this.context.stroke();
        }
      });
      $el.mousedown(function(e) {
        down = true && _this.playing;
        _this.context.beginPath();
        mousePos1 = fixPosition(e, _this.canvas);
        return mousePosMax = {
          difY: 0,
          y: 0
        };
      });
      return $(document).mouseup(function(e) {
        var tone;
        if (down && _this.playing) {
          down = false;
          _this.loadRestorePoint();
          mousePos2 = fixPosition(e, _this.canvas);
          tone = _this.selectTone();
          console.log(tone);
          _this.checkAnswer(tone);
          return _this.nextCard();
        }
      });
    };

    Game.prototype.startGame = function() {
      console.log('start!');
      this.playing = true;
      $el.find('.startgame').addClass('hidden').end().find('.game').removeClass('hidden');
      return this.nextCard();
    };

    Game.prototype.checkAnswer = function(tone) {
      console.log(tone, this.word.ans, this.combo);
      if (tone === this.word.ans) {
        this.score += 1 * parseInt(Math.max(this.combo / 2, 1));
        this.combo += 1;
        this.$score.text(this.score);
        this.showJiayou();
        console.log("JIAYOU!!!!");
        return this.saveRestorePoint();
      } else {
        return this.combo = 1;
      }
    };

    Game.prototype.showJiayou = function() {
      var c;
      console.log("nice!!");
      c = this.context;
      this.jiayous.push({
        'fontSize': 30,
        'text': 'nice!',
        'left': this.width - (50 * Math.random()) - 50,
        'top': this.height - (50 * Math.random()) - 20,
        'step': 0
      });
      return console.log('nice', this.jiayous);
    };

    Game.prototype.redraw = function(self) {
      var c, i, jiayou, r, toRemove, _i, _j, _ref, _ref1, _ref2, _ref3, _results;
      console.log('jiayous is', self.jiayous);
      if ((_ref = this.jiayous) != null ? _ref.length : void 0) {
        c = this.context;
        c.clearRect(0, 0, this.width, this.height);
        this.drawCard();
        c.fillStyle = '#ff0000';
        c.textBaseline = 'top';
        c.textAlign = 'center';
        console.log("length is", self.jiayous.length);
        toRemove = [];
        for (i = _i = 0, _ref1 = self.jiayous.length; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
          jiayou = self.jiayous[i];
          if (jiayou) {
            this.setCanvasFont({
              fontSize: (jiayou.fontSize + jiayou.step) + 'px'
            });
            self.jiayous[i].step += 1;
            console.log('step');
            if (self.jiayous[i].step > 10) {
              toRemove.push(i);
            }
            c.fillText('nice!', jiayou.left, jiayou.top);
            console.log(jiayou.left, jiayou.top);
          }
        }
        console.log("to remove", toRemove);
        _results = [];
        for (i = _j = 0, _ref2 = toRemove.length; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
          console.log("removing!", i, self.jiayous);
          r = toRemove[i] - i;
          if ((_ref3 = self.jiayous) != null) {
            _ref3.splice(r, 1);
          }
          _results.push(console.log('now', self.jiayous));
        }
        return _results;
      }
    };

    Game.prototype.selectTone = function() {
      var difX, difY;
      difX = mousePos2.x - mousePos1.x;
      difY = mousePos2.y - mousePos1.y;
      if (Math.abs(mousePosMax.difY) <= Math.abs(difY) + 10) {
        if (difY > 50 && difX > 50) {
          console.log("fourth!");
          return '4';
        }
        if (difY < -50 && difX > 50) {
          console.log("second!");
          return '2';
        }
      }
      if (difX > 50 || difX < -50) {
        if (mousePosMax.difY > 20 && mousePosMax.y - mousePos2.y > 20) {
          console.log("third!");
          return '3';
        } else {
          console.log("first!");
          return '1';
        }
      }
      return '5';
    };

    Game.prototype.chooseWord = function() {
      this.word = words[parseInt(Math.random() * words.length)];
      return this.word;
    };

    return Game;

  })();
  return Game;
});
